#! /bin/csh

#  This script is meant to help with generation of both Mark5A and
#  Mark5C schedules for a project.  This idea is simple.  Write
#  a key file with all of the lines required for either output,
#  but put a special comment at the front of each line that is only
#  needed for one or that needs to be different in the two cases.  
#  Typically the special comment is "!MARK5A" in front of the
#  Mark5A lines and "!MARK5C" in front of the Mark5C lines.  Put that
#  key file in the main directory for the project.  Make subdirectories
#  for each of the types of output desired.  cd to the desired
#  subdirectory and run the script. For example, type:
#    runsch ../td009a.key MARK5A
#  The script will copy ../tb009a.key to file temp_in in the current 
#  subdirectory.  Then it will use sed to create temp.key that has 
#  the comment markers of the !MARK5A type blankedleaving those lines 
#  active for SCHED.  The script then runs SCHED.

#  Note that normally the script would be run from either a MARK5A or
#  a MARK5C subdirectory.  For the examples, it is run in the parent
#  directory and the SCHED files end up there for easy bookkeeping.
#  There are scripts in the examples, like egrdbe.run, that invoke this
#  script.

#  This version of runsch is meant to be run from the Verify script.
#  If you wish to use it separately, in the AOC, use the one in 
#  ~cwalker/bin, or anywhere, change $SCHBIN below to $SCHED/bin.

/bin/rm temp.key
echo Running $1:t with \!$2 replaced by blanks.
echo Modified key file is in temp.key
sed   's:\!'$2'::'  <$1:t >temp.key
../bin/sched < temp.key

# The varient on the last line shown below, even run from within 
# Verify which defines SCHBIN, doesn't always seem to work.
# $SCHBIN/sched < temp.key
# The version above will only work when sched is in the normal bin area.


