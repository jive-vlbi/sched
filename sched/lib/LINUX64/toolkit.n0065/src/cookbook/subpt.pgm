C$Procedure   SUBPT ( Compute a sub-observer point )

      PROGRAM SUBPT
      IMPLICIT NONE
      
C$ Abstract
C
C     This "cookbook" program demonstrates the use of the SPICELIB
C     Toolkit by computing the apparent sub-observer point on a target
C     body. It uses light time and stellar aberration corrections in
C     order to do this.
C
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Input
C
C     The user is prompted for the following:
C
C        - The name of a leapseconds kernel file.
C        - The name of a Planetary constants kernel file.
C        - The name of a NAIF SPK Ephemeris file.
C        - NAIF ID for the observing body.
C        - NAIF ID for the target body.
C        - The name of the body-fixed reference frame
C          associated with the target body (for example, IAU_MARS).
C        - A UTC epoch at which to begin.
C        - A UTC epoch at which to end.
C        - The number of sub-observer points to be calculated in the
C          given UTC time interval.
C
C$ Output
C
C     The program calculates the planetocentric latitude and longitude
C     of the nearest point on the target body to the observing body
C     for a given number of UTC epochs (see Input above). For each
C     time, the following information is displayed on the terminal
C     screen:
C
C        - The UTC epoch.
C        - The planetocentric longitude of the nearest point on
C          the target body to the observing body.
C        - The planetocentric latitude of the nearest point on
C          the target body to the observing body.
C
C$ Particulars
C
C     The SPK file must contain data for both the observing body and
C     the target body during the specified time interval.
C
C     The "apparent sub-observer point" is defined in this program to
C     be the point on the target body that appears to be closest to the
C     observer. The apparent sub-observer point may also be defined as
C     the intercept on the target's surface of the ray emanating from
C     the observer and passing through the apparent target body's
C     center, but we don't demonstrate use of that definition here. See
C     the header of SUBPNT for details.
C
C     In order to compute the apparent location of the sub-observer
C     point, we correct the position of the sub-observer point for both
C     light time and stellar aberration, and we correct the orientation
C     of the target body for light time. We consider "light time" to be
C     the time it takes a photon to travel from the sub-observer point
C     to the observer. If the light time is given the name LT, then the
C     apparent position of the sub-observer point relative to the
C     observer is defined by the vector from the sub-observer point's
C     location (relative to the solar system barycenter) at ET-LT,
C     minus the observer's location (again, relative to the solar
C     system barycenter) at ET, where this difference vector is
C     corrected for stellar aberration. 
C
C     See the header of the SPICELIB routine SPKEZR for more
C     information on light time and stellar aberration corrections; see
C     the header of the SPICELIB routine SUBPNT for an explanation of
C     how it applies aberration corrections.
C
C     Planetocentric coordinates are defined by a distance from a
C     central reference point, an angle from a reference meridian, and
C     an angle above the equator of a sphere centered at the central
C     reference point.  These are the radius, longitude, and latitude,
C     respectively.
C
C     The program makes use of the following fundamental CSPICE
C     interface routines:
C
C        FURNSH   ---   makes kernel information available to
C                       the user's program.
C
C        STR2ET   ---   converts strings representing time to counts
C                       of seconds past the J2000 TDB epoch.
C
C        ET2UTC   ---   converts an ephemeris time represented as
C                       seconds past J2000 TDB to a formatted UTC
C                       string.
C
C        PROMPT   ---   interactively prompt a user for a string input
C
C        SUBPNT   ---   calculate the position of the sub-observer point
C                       of one body with respect to another
C
C     For the sake of brevity, this program does NO error checking on
C     its inputs. Mistakes will cause the program to crash. 
C
C$ References
C
C        KERNEL        The SPICELIB Kernel Pool
C        ROTATIONS     Rotations
C        SPK           S- and P- Kernel (SPK) Specification
C        TIME          Time routines in SPICELIB
C
C     For questions about a particular subroutine, refer to its
C     header.
C
C$ Version
C
C-    SPICELIB Version 4.0.0, 08-FEB-2008 (NJB)
C
C        References to deprecated routine SUBPT have been
C        replaced with references to SUBPNT. The old program
C        name SUBPNT has been changed to SUBPT to allow
C        the program to call a routine named SUBPNT.
C
C        The program now uses both stellar aberration and
C        light time corrections. Previously only light
C        time corrections were performed.
C
C        The program now prompts for the name of the target
C        body-fixed reference frame.
C
C        The discussion in Particulars has been updated.
C
C        Various header typos were corrected.
C
C-    SPICELIB Version 3.5.0, 10-JUL-2002 (EDW)
C
C        Replaced all load routines (if appropriate) with
C        FURNSH calls. Replaced WRITE(*,*) with CALL TOSTDO
C        (if appropriate) and CALL DPFTM; replaced READ(*,*)
C        with CALL PROMPT.
C
C        Replace geometry code with single call to SUBPT
C        routine.
C     
C-    SPICELIB Version 2.1.1, 03-NOV-2000 (EDW)
C
C        Added a BYEBYE( 'SUCCESS' ) call at program's end.
C
C-    SPICELIB Version 2.1.0, 05-AUG-1994 (HAN)
C
C        Cleaned up the code.
C
C-    SPICELIB Version 2.0.0, 01-APR-1992 (KRG)
C
C        Cleaned up the comments.
C
C        Fixed some INTEGER/DOUBLE PRECISION mixed mode arithmetic
C        by using the intrinsic function DBLE to convert the INTEGER
C        to DOUBLE PRECISION.
C
C        Removed the 'real number' logical test in the DO WHILE loop,
C        replacing it with an INTEGER equivalent. Added the variable
C        NPTS to enable this.
C
C-    Beta Version 1.0.0, 25-SEP-1990 (JEM)
C
C-&
 
C
C     SPICELIB functions
C
      DOUBLE PRECISION      DPR
 
C
C     Parameters
C 
      INTEGER               LONG
      PARAMETER           ( LONG  = 128 )
 
      INTEGER               MED
      PARAMETER           ( MED   =  32 )
 
      INTEGER               SHORT
      PARAMETER           ( SHORT =   8 )
 
C
C     Variables
C
      CHARACTER*(80)        LINE
      CHARACTER*(SHORT)     ABCORR
      CHARACTER*(SHORT)     CONTIN
      CHARACTER*(MED)       FIXFRM
      CHARACTER*(LONG)      LEAPSC
      CHARACTER*(LONG)      PCONST
      CHARACTER*(LONG)      SPKFIL
      CHARACTER*(MED)       UTCBEG
      CHARACTER*(MED)       UTCEND
      CHARACTER*(MED)       UTCOUT
      CHARACTER*(64)        OBSRVR
      CHARACTER*(64)        TARGET
      CHARACTER*(11)        STR1
      CHARACTER*(11)        STR2      
      
      DOUBLE PRECISION      DELTA
      DOUBLE PRECISION      EPOCH
      DOUBLE PRECISION      ETBEG
      DOUBLE PRECISION      ETEND
      DOUBLE PRECISION      LAT
      DOUBLE PRECISION      LON
      DOUBLE PRECISION      RADIUS
      DOUBLE PRECISION      SPOINT ( 3 )
      DOUBLE PRECISION      SRFVEC ( 3 )
      DOUBLE PRECISION      TRGEPC

      INTEGER               MAXPTS
      INTEGER               NPTS

C
C     Introduction.
C
      CALL TOSTDO ( ' ' )
      CALL TOSTDO ( '             Welcome to SUBPT                   ')
      CALL TOSTDO ( ' ' )
      CALL TOSTDO ( 'This program demonstrates the use of SPICELIB in')
      CALL TOSTDO ( 'computing the apparent sub-observer point on a'  )
      CALL TOSTDO ( 'target body. The computations make use of light' )
      CALL TOSTDO ( 'time and stellar aberration corrections.'        )
      CALL TOSTDO ( ' ' )
 
C
C     Get all input.  For brevity we will not do any error checking
C     here.  Each subroutine that is called has internal error
C     checking.
C
C
      CALL TOSTDO ( ' ' )
      CALL PROMPT ('Enter the name of leapseconds kernel file: ',
     .              LEAPSC )
 
      CALL TOSTDO ( ' ' )
      CALL PROMPT ('Enter the name of a planetary constants kernel: ',
     .              PCONST )
 
      CALL TOSTDO ( ' ' )
      CALL PROMPT ('Enter the name of a binary SPK file: ', SPKFIL )
 
      CALL TOSTDO ( ' ' )
      CALL TOSTDO ( 'Working ... Please wait.' )
      CALL TOSTDO ( ' ' )
 
C
C     Load the leapseconds kernel file for time conversions and the
C     planetary constants file for determining the size and shape
C     of planets and satellites.
C
      CALL FURNSH ( LEAPSC )
      CALL FURNSH ( PCONST )
 
C
C     Load the ephemeris file. Note that this is NOT done through
C     the kernel pool, but rather with the SPICE kernel loader FURNSH.
C
      CALL FURNSH ( SPKFIL )
 
C
C     Begin the continuation loop.
C
      CONTIN = 'Y'
 
      DO WHILE ( CONTIN .EQ. 'Y' )

         CALL PROMPT ('Enter the name for the observing body: ',
     .                 OBSRVR )
         CALL TOSTDO ( ' ' )
      
         CALL PROMPT ('Enter the name for a target body: ',
     .                 TARGET )
         CALL TOSTDO ( ' ' )
      
         CALL PROMPT ('Enter the name of the target body-fixed frame: ',
     .                 FIXFRM )
         CALL TOSTDO ( ' ' )
          
         CALL PROMPT ( 'Enter the number of points to calculate: ',
     .                  LINE )
         CALL PRSINT ( LINE, MAXPTS )
         CALL TOSTDO ( ' ' )


C        Make sure that the number of sub-observer point calculations
C        is >= 1, to avoid a division by zero error.
C
         MAXPTS = MAX( 1, MAXPTS)

C
C        Input strings for the UTC time interval, or single UTC
C        time for a single evaluation.
C
C        DELTA is the increment between consecutive times, if
C        needed.
C
         IF ( MAXPTS .EQ. 1 ) THEN

            CALL PROMPT ( 'Enter the UTC time: ', UTCBEG ) 
            CALL TOSTDO ( ' ' )

            CALL STR2ET ( UTCBEG, ETBEG )
            DELTA = 0.d0

         ELSE

            CALL PROMPT ( 'Enter the beginning UTC time: ', UTCBEG ) 
            CALL TOSTDO ( ' ' )
         
            CALL PROMPT ( 'Enter the ending UTC time: ', UTCEND )
            CALL TOSTDO ( ' ' )

C
C           Convert the UTC time interval endpoints to seconds past
C           J2000 TDB (Barycentric Dynamical Time). TDB is the time
C           system used internally in SPK ephemeris files and high
C           level SPICE geometry subroutine interfaces. The name "ET"
C           used here stands for "Ephemeris Time." ET and TDB are
C           treated as synonyms in SPICE documentation.
C
            CALL STR2ET ( UTCBEG, ETBEG )
            CALL STR2ET ( UTCEND, ETEND )

            DELTA  = ( ETEND - ETBEG ) / DBLE( MAXPTS - 1 )

         END IF

C
C        Set the aberration flag. We will use 'LT+S' (for Light-Time
C        plus Stellar Aberration Corrections).
C
         ABCORR = 'LT+S'
 
C
C        Write the headings for the table of values.
C
         CALL TOSTDO ('Planetocentric coordinates for the '
     .            //  'nearest point')
         CALL TOSTDO ('on the target body to the observing body (deg).')
 
         LINE = 'Target body: #          Observing body: #'
         CALL REPMC ( LINE, '#', TARGET, LINE )
         CALL REPMC ( LINE, '#', OBSRVR, LINE )
         CALL TOSTDO ( LINE )
 
         CALL TOSTDO ( ' ' )
         CALL TOSTDO ('       UTC Time            Lat         Lon')
         CALL TOSTDO ('----------------------------------------------')
 
C
C        Now, everything is set up.
C
         EPOCH  = ETBEG
         NPTS   = 1
 
         DO WHILE ( NPTS .LE. MAXPTS )
C
C           Note: SUBPNT can also calculate a "sub-observer point" via
C           the intercept of the observer-target vector with the target
C           body's surface. The computation "method" argument value for
C           that calculation is

C              'Intercept: ellipsoid'
C
C           The output sub-observer point SPOINT is expressed in the
C           body-fixed reference frame FIXFRM specified by the user,
C           where the orientation of the frame is evaluated at the time
C           TRGEPC. TRGEPC is expressed in seconds past J2000 TDB, and
C           is equal to ET-LT, where LT is the light time from the
C           sub-observer point to the observer. The output SRFVEC is
C           the apparent position of the sub-observer point relative to
C           the observer. SRFVEC is also expressed in the reference
C           frame FIXFRM.
C
C           Please see the SUBPNT source file header for further
C           information.            
C           
            CALL SUBPNT ( 'Near point: ellipsoid', 
     .                    TARGET, EPOCH,  FIXFRM, ABCORR,
     .                    OBSRVR, SPOINT, TRGEPC, SRFVEC   )

            CALL RECLAT ( SPOINT, RADIUS, LON, LAT )
 
C
C           Multiply LAT and LON by the number of degrees per radian.
C
            LON = LON * DPR ()
            LAT = LAT * DPR ()
 
C
C           Convert the current EPOCH to UTC time for display.
C
            CALL ET2UTC ( EPOCH, 'C', 3, UTCOUT )
 
C
C           Display results in a table format:
C
            CALL DPFMT ( LAT, 'XXX.XXXXX', STR1 )
            CALL DPFMT ( LON, 'XXX.XXXXX', STR2 )
            LINE = '  ' //UTCOUT(1:20) // '  ' //STR1 // '  ' //STR2
            CALL TOSTDO ( LINE )
            
            EPOCH = EPOCH + DELTA
            NPTS = NPTS + 1
 
         END DO
 
C
C        Continue?
C
         CALL TOSTDO ( ' ' )
         CALL PROMPT ('Continue? (Enter Y or N): ', CONTIN )
 
         IF ( CONTIN .EQ. 'y ' ) THEN

            CONTIN = 'Y'
            
         ELSE IF ( CONTIN .EQ. ' ' ) THEN
            
            CONTIN = 'Y'
            
         END IF
 
      END DO
      
      CALL BYEBYE( 'SUCCESS' )
      END
