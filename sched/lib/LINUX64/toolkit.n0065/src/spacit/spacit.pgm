C$Program SPACIT ( SPACIT Utility Program )

      PROGRAM SPACIT
      IMPLICIT NONE

C$ Abstract
C
C     This is a utility program that permits easy access to several
C     operations on SPICE data files.
C
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Required_Reading
C
C     None.
C
C$ Keywords
C
C     FILES
C     UTILITY
C
C$ Parameters
C
C     None.
C
C$ Exceptions
C
C     None.
C
C$ Files
C
C     1) All of the tasks performed require at least one filename.
C
C        File conversions require two filenames: A transfer filename and
C        a binary filename.
C
C        Reading the comment area of a file requires a single binary
C        filename.
C
C        Summarizing a file requires a binary filename, a leapseconds
C        filename and an SCLK filename for summarizing CK files.
C
C     2) Two text kernel files are potentially used:
C
C        a) A leapseconds file if any summary is to be performed.
C           This file provides information necessary to perform time
C           conversion between UTC and ET (TDB)
C
C        b) An SCLK, spacecraft clock, file if a C-kernel summary is to
C           be performed. This file provides informationnecessary to
C           perform time conversions between the encoded spacecraft time
C           system and UTC or ET (TDB).
C
C        The program will prompt for the names of these files if needed.
C
C$ Particulars
C
C     A text transfer file may include text data preceding the line
C     identifying the file as a SPICE transfer file.  An example of such
C     an ID info line:
C
C        DAFETF NAIF DAF ENCODED TRANSFER FILE
C
C     A transfer file with some sort of non-SPICE text header has the
C     structure:
C
C        ___________
C       |
C       |
C       |
C       |   ...some text...
C       |
C       |
C       |
C       |___________
C       DAFETF NAIF DAF ENCODED TRANSFER FILE
C             ...unmodified transfer file text....
C
C     The text preceding the info line is ignored:  WARNING, if
C     the text header contains a valid SPICE ID string (DAFETF
C     for example), the program assumes all data after that line
C     is the transfer file data.  Something will break.
C
C$ Examples
C
C     None.
C
C$ Restrictions
C
C     None.
C
C$ Literature_References
C
C     None.
C
C$ Author_and_Institution
C
C     W.L. Taber     (JPL)
C     K.R. Gehringer (JPL)
C     J.E. McLean    (JPL)
C     R.E. Thurman   (JPL)
C
C$ Version
C
C-    SPICE Version 7.2.1, 03-NOV-2000 (EDW)
C
C        Added a BYEBYE( 'SUCCESS' ) call at program's end.
C     
C-    SPICE Version 7.2.0 24-MAR-1999 (EDW)
C
C        All write to standard output call replaced with TOSTDO.
C
C        Operation of the binary to transfer function enhanced to
C        accomodate SFDUs.  See the routines:  SPAT2B 2.0.0;
C        ZZGETFAT 1.0.0; ZZCONVTB 1.0.0 for details.
C
C-    Beta Version 7.1.1, 14-MAR-1997 (WLT)
C
C        The summary portion of the program was slightly enhanced
C        See the routines  SPASUM Version 2.0.0, CKWSS 2.1.0, and
C        SPKWSS 2.1.0 for details on the enhancements.
C
C        In addition the greeting was updated to print the version
C        of the SPICE toolkit used to link SPACIT.
C
C-    Beta Version 7.1.0, 24-JAN-1996 (KRG)
C
C        This is a cleanup of loose ends from Version 7.0.0.
C
C-    Beta Version 7.0.0, 26-JUL-1995 (KRG)
C
C        Modified the main program. Each menu function now calls a
C        subroutine to perform its function.
C
C        In the summaries, ET times are now displayed in a calendar
C        format similar to the UTC times.
C
C        The program can now detect when an incorrect file has been
C        specified in most cases.
C
C-    Beta Version 6.0.0, 25-APR-1994 (KRG)
C
C        Added support the the dynamic identification of file types.
C        This had the effect of reducing the number of options on the
C        main menu to just the types of operations that the SPACIT
C        program can perform. This allows a much more concise main menu
C        and fewer inputs or less a priori knowledge on the part of a
C        user of the program.
C
C        Changed the terminology used for text files. These are now
C        called transfer files to differentiate them from text kernel
C        files.
C
C        Added support for the new binary PCK file format.
C
C        The $ Files section has been modified. It is now more relevant
C        to this version of the SPACIT program.
C
C        The SPACIT program now cleans up after itself in the event of a
C        file conversion failure. The file being created is deleted if
C        the conversion fails. This is a new feature of the program.
C
C        The file summary formats have been changed. The information
C        contained in the summaries is that same as before, but it has
C        been rearranged a bit for easire readability.
C
C-    Beta Version 5.0.0, 16-FEB-1993 (KRG)
C
C        Added support for the E-Kernel.
C
C        This is an incremental improvement in the program, and others
C        are planned.
C
C-    Beta Version 4.0.0, 04-SEP-1992 (KRG)
C
C        The user interface for this routine was completely rewritten.
C        The summary subroutines were not changed. A centralized
C        menuing capability was added, and several utility subroutines
C        have also been added.
C
C        The main program now coordinates the collection of filenames,
C        loading the leapseconds kernel or the SCLK kernel, etc.
C
C        This is in incremental improvement in the program, and others
C        are planned.
C
C-    Beta Version 3.0.0, 11-JUN-1991 (JEM)
C
C        This version has several major changes from the last.
C
C        1.  Changes were made so that output can go to a file
C            as well as the terminal screen.
C
C        2.  This version has the functionality to display
C            comments from the comment area of a binary SPK or
C            CK file.
C
C        3.  The prompting for and loading of leapseconds and
C            sclk kernel files was moved to the subroutine
C            GETTSK.
C
C        4.  If the user hits return at a prompt, the current
C            task is cancelled and the menu is displayed again.
C
C        5.  The error action was set to 'RETURN' at the beginning
C            of the program.  FAILED is checked where necessary
C            and appropriate action is taken.  In the previous
C            version the error action was 'DEFAULT' except in
C            a few places.
C
C        6.  Various cosmetic changes were made such as alphabetizing
C            variable declarations.
C
C-    Beta Version 2.0.0, 16-JAN-1991 (JEM)
C
C        The calls to DAFB2A and DAFA2B were replaced with calls
C        to SPCB2A and SPCA2B to include the comment area when
C        converting an SPK or CK file.
C
C-    Beta Version 1.2.0, 3-SEP-1990 (JEM)
C
C        A few blank line write statements were added for display
C        readability.
C
C-    Beta Version 1.1.0, 4-APR-1990 (HAN)
C
C        The declarations for the text and binary file names have
C        been changed from CHARACTER*(40) to CHARACTER*(80).
C
C-    Beta Version 1.0.0, 31-MAY-1989 (RET)
C
C-&

C$ Revisions
C
C-    SPICE Version 7.2.0 24-MAR-1999 (EDW)
C
C        All write to standard output call replaced with TOSTDO.
C
C        Operation of the binary to transfer function enhanced to
C        accomodate SFDUs.  See the routines:  SPAT2B 2.0.0;
C        ZZGETFAT 1.0.0; ZZCONVTB 1.0.0 for details.
C
C-    Beta Version 7.1.1, 14-MAR-1997 (WLT)
C
C        The summary portion of the program was slightly enhanced
C        See the routines  SPASUM Version 2.0.0, CKWSS 2.1.0, and
C        SPKWSS 2.1.0 for details on the enhancements.
C
C-    Beta Version 7.1.0, 26-JUL-1995 (KRG)
C
C        Continuing the general code cleanup and modularization begun
C        with version 7.0.0.
C
C-    Beta Version 7.0.0, 26-JUL-1995 (KRG)
C
C        Modified the main program. Each menu function now calls a
C        subroutine to perform its function.
C
C        In the summaries, ET times are now displayed in a calendar
C        format similar to the UTC times.
C
C        The program can now detect when an incorrect file has been
C        specified in most cases.
C
C-    Beta Version 6.0.0, 25-APR-1994 (KRG)
C
C        Added support the the dynamic identification of file types.
C        This had the effect of reducing the number of options on the
C        main menu to just the types of operations that the SPACIT
C        program can perform. This allows a much more concise main menu
C        and fewer inputs or less a priori knowledge on the part of a
C        user of the program.
C
C        Changed the terminology used for text files. These are now
C        called transfer files to differentiate them from text kernel
C        files.
C
C        Added support for the new binary PCK file format.
C
C        The $ Files section has been modified. It is now more relevant
C        to this version of the SPACIT program.
C
C        The SPACIT program now cleans up after itself in the event of a
C        file conversion failure. The file being created is deleted if
C        the conversion fails. This is a new feature of the program.
C
C        The file summary formats have been changed. The information
C        contained in the summaries is that same as before, but it has
C        been rearranged a bit for easire readability.
C
C        This version of SPACIT is significantly different than the
C        previous version in the way it handles filename inputs and
C        related issues  necessary to call the correct subroutines. The
C        code for collecting binary filenames, and text filename when
C        necessary, is now separated form the code which collects teh
C        leapseconds and SCLK filenames when they are needed. Thi swas
C        necessary because we do not know whether we need an SCLK file
C        until we know the type of the binary file we will be
C        summarizing. This was the major change to the program.
C
C-    Beta Version 5.0.0, 16-FEB-1993 (KRG)
C
C        Added support for the E-Kernel.
C
C        This is an incremental improvement in the program, and others
C        are planned.
C
C-    Beta Version 4.0.0, 04-SEP-1992 (KRG)
C
C        The user interface for this routine was completely rewritten.
C        The summary subroutines were not changed. A centralized
C        menuing capability was added, and several utility subroutines
C        have also been added.
C
C        The main program now coordinates the collection of filenames,
C        loading the leapseconds kernel or the SCLK kernel, etc.
C
C        This is in incremental improvement in the program, and others
C        are planned.
C
C-    Beta Version 3.0.0, 11-JUN-1991 (JEM)
C
C        1.  A section of code was added just after the banner
C            is written.  The user is asked whether or not he/she
C            wants the output to go to a file.  If so, the user
C            is prompted for the name of the output file.  Then
C            that file is opened as a text file and the variable
C            TOFILE is set to .TRUE.  At the end, the file is
C            closed.
C
C            Before calling SUMSPK or SUMCK, the name of the
C            file to be summarized is written to the output file
C            if TOFILE is TRUE.
C
C            Two new arguments were added to the calling sequences
C            of SUMSPK and SUMCK:  TOFILE and UNIT.  The same two
C            arguments were also added to the calling sequences
C            of the routines DISPSP and DISPC which get called
C            by SUMSPK and SUMCK respectively.  If TOFILE is
C            true, the summary is written to the file connected
C            to UNIT.
C
C        2.  The option to display comments was listed in the header
C            and code was added to handle the case when NEXT = 'COM'.
C            A new routine called WRCOM writes the comments
C            to the screen and to the output file if one was
C            requested.
C
C        3.  The subroutine GETTSK now loads leapseconds and
C            sclk kernel files when necessary so that part of
C            the code was removed.
C
C        4.  A possible task returned from GETTSK is
C            'NONE'.  That means a task was selected, then
C            cancelled.  GETTSK is called repeatedly until the
C            task returned is something other that NONE.  In
C            this way the user is able to select another task.
C
C-&

C
C     SPICELIB functions
C
      INTEGER               RTRIM

      LOGICAL               FAILED
C
C     Parameters
C
C
C     Set the version. This number should agree with the version number
C     listed in the $ Version section of the header.
C
      CHARACTER*(*)         VER
      PARAMETER           ( VER = '7.1.1')

C
C     Set a value for a replacement marker.
C
      CHARACTER*(*)         REPMRK
      PARAMETER           ( REPMRK = '#' )
C
C     Set a value for the length of an input text line.
C
      INTEGER               LINLEN
      PARAMETER           ( LINLEN = 255 )
C
C     Set a length for the commercial lines.
C
      INTEGER               CMRLEN
      PARAMETER           ( CMRLEN = 80 )
C
C     Set the number of lines in the commercial.
C
      INTEGER               NCMRCL
      PARAMETER           ( NCMRCL = 7 )
C
C     Set a length for the option values.
C
      INTEGER               OPTLEN
      PARAMETER           ( OPTLEN = 20 )
C
C     Set a length for the title of a menu.
C
      INTEGER               TTLLEN
      PARAMETER           ( TTLLEN = 20 )
C
C     Set the length of the text description of an option on a menu.
C
      INTEGER               OTXLEN
      PARAMETER           ( OTXLEN = 40 )
C
C     Set the number of options available on the main menu.
C
      INTEGER               MNOPT
      PARAMETER           ( MNOPT = 6 )
C
C     Variables
C
      CHARACTER*(CMRLEN)    CMRCL (NCMRCL)
      CHARACTER*(LINLEN)    LINE
      CHARACTER*(1)         MAINNM(MNOPT)
      CHARACTER*(TTLLEN)    MAINTL
      CHARACTER*(OTXLEN)    MAINTX(MNOPT)
      CHARACTER*(OPTLEN)    MAINVL(MNOPT)
      CHARACTER*(OPTLEN)    OPTION

      CHARACTER*(12)        TKV

      INTEGER               IOPT
      INTEGER               LOGLUN
      INTEGER               R
      INTEGER               I

      LOGICAL               CONTNU
      LOGICAL               DONE
      LOGICAL               FOUND
      LOGICAL               LOGFIL
      SAVE
C
C     Define the main menu title ...
C
      DATA   MAINTL    / 'SPACIT Options      ' /
C
C     Define the main menu option values ...
C
      DATA   MAINVL   /
     .                  'QUIT                ',
     .                  'START_LOG_FILE      ',
     .                  'TRANSFER_TO_BINARY  ',
     .                  'BINARY_TO_TRANSFER  ',
     .                  'SUMMARIZE           ',
     .                  'READ_COMMENTS       '
     .                /
C
C     Define the main menu descriptive text for each option ...
C
      DATA   MAINTX   /
     .                  'Quit.',
     .                  'Log SPACIT output to a file.',
     .                  'Convert transfer file to binary file.',
     .                  'Convert binary file to transfer file.',
     .                  'Summarize binary file.',
     .                  'Read comment area of binary file.'
     .                /
C
C     Define the main menu option names ...
C
      DATA   MAINNM   /
     .                   'Q',
     .                   'L',
     .                   'T',
     .                   'B',
     .                   'S',
     .                   'R'
     .                /
C
C     Register the SPACIT main program with the SPICELIB error handler.
C
      CALL CHKIN ( 'SPACIT' )
      CALL TKVRSN( 'TOOLKIT', TKV )
      R = RTRIM ( TKV )
C
C     Set the error action to 'RETURN'. We don't want the program
C     to abort if an error is signalled. We check FAILED where
C     necessary. If an error is signalled, we'll just handle the
C     error, display an appropriate message, then call RESET at the
C     end of the loop to continue.
C
      CALL ERRACT ( 'SET', 'RETURN' )
C
C     Set the error messages that we want to have displayed. We will
C     display the SPICELIB short and long error messages. This is done
C     to ensure that some sort of an error message is displayed if an
C     error occurs. In several places, long error messages are not set,
C     so if only the long error messages were displayed, it would be
C     possible to have an error signalled and not see any error
C     information. This is not a very useful thing.
C
      CALL ERRPRT ( 'SET', 'NONE, SHORT, LONG, TRACEBACK' )
C
C     Set up the initial ``commercial'' for when the program is
C     executed.
C
      CMRCL(1)  = ' '
      CMRCL(2)  = ' '
      CMRCL(3)  = ' '
      CMRCL(4)  = '    Welcome to SPACIT Version: ' // VER
      CMRCL(5)  = '          (Spice Toolkit ' // TKV(1:R) // ')'
      CMRCL(6)  = ' '
      CMRCL(7)  = ' '
C
C     Initialize the body ID to body name mapping by calling BODC2N.
C     This initialization may be a time consuming process, so we
C     do it at the start of the program. By doing this, the slowness of
C     the initialization is hidden as part of the apparent loadin gof
C     the program.
C
      CALL BODC2N ( 0, LINE, FOUND )

      IF ( FAILED() ) THEN
C
C        If anything failed when initializing the body ID code and name
C        tables, then we cannot proceed, so exit.
C
         LINE = 'Error building the NAIF body code and name'
     .   // ' tables. Cannot continue.'
         CALL TOSTDO ( ' '   )
         CALL TOSTDO ( LINE  )
         CALL TOSTDO ( ' '   )
         STOP

      END IF
C
C     Display the commercial.
C
      DO I = 1, NCMRCL
         CALL TOSTDO ( CMRCL(I) )
      END DO

C
C     Initialize the flag which indicates whether a logfile has
C     been created.
C
      LOGFIL = .FALSE.
C
C     We have only initialized things and displayed a commercial, so we
C     are not done.
C
      DONE = .FALSE.
C
C     While there is still more to do ...
C
      DO WHILE ( .NOT. DONE )
C
C        We initialize a few things here so that they get reset for
C        every trip through the loop.
C
C        Initialize the logical flags that we use and
C
         CONTNU = .TRUE.
C
C        the option.
C
         OPTION = ' '
C
C        Get the option to be performed from the main menu.
C
         CALL TOSTDO ( ' ' )
         CALL GETOPT ( MAINTL, MNOPT, MAINNM, MAINTX, IOPT )

         IF ( FAILED() ) THEN
            CONTNU = .FALSE.
         END IF
C
C        Process the option that was selected.
C
         IF ( CONTNU ) THEN

            OPTION = MAINVL(IOPT)

            IF ( OPTION .EQ. 'QUIT' ) THEN

               LINE = '   Quitting SPACIT.'
               CALL TOSTDO ( ' '  )
               CALL TOSTDO ( LINE )
               CALL TOSTDO ( ' '  )

               DONE = .TRUE.

            ELSE IF ( OPTION .EQ. 'TRANSFER_TO_BINARY' ) THEN

               CALL TOSTDO ( ' ' )
               CALL SPAT2B ( LOGFIL, LOGLUN )

            ELSE IF ( OPTION .EQ. 'BINARY_TO_TRANSFER' ) THEN

               CALL TOSTDO ( ' ' )
               CALL SPAB2T ( LOGFIL, LOGLUN )

            ELSE IF ( OPTION .EQ. 'SUMMARIZE' ) THEN

               CALL TOSTDO ( ' ' )
               CALL SPASUM ( LOGFIL, LOGLUN )

            ELSE IF ( OPTION .EQ. 'READ_COMMENTS' ) THEN

               CALL TOSTDO ( ' ' )
               CALL SPARDC ( LOGFIL, LOGLUN )

            ELSE IF ( OPTION .EQ. 'START_LOG_FILE' ) THEN

               CALL TOSTDO ( ' ' )
               CALL SPALOG ( VER, LOGFIL, LOGLUN )

            ELSE
C
C              The program should never be able to get here, but
C              because more options may be added in the future, I
C              figured that it would be a good idea to include
C              this case.
C
               CONTNU = .FALSE.
               LINE   = '''' // REPMRK // ''' is not a recognized'
     .         //       ' option.'
               CALL REPMC ( LINE, REPMRK, MAINVL(IOPT), LINE )

               CALL TOSTDO ( ' ' )
               CALL TOSTDO ( LINE(:RTRIM(LINE)) )
               CALL TOSTDO ( ' ' )

            END IF

         END IF

C
C        Just in case something is still wrong, call reset again and
C        try to continue.
C
         IF ( FAILED() ) THEN
            CALL RESET
         END IF

      END DO

      CALL CHKOUT ( 'SPACIT' )
      CALL BYEBYE( 'SUCCESS' )
      END
