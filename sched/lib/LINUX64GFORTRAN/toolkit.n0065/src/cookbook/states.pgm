C$Procedure   STATES ( Compute state of one body relative to another )

      PROGRAM STATES
      IMPLICIT NONE
      
C$ Abstract
C
C     This 'cookbook' program demonstrates the use of NAIF S- and P-
C     Kernel (SPK) files and subroutines to calculate the state
C     (position and velocity) of one solar system body relative to
C     another solar system body.
C
C     The purpose of this program is twofold:
C
C        1) To show how NAIF ephemeris data may be made available to
C           a program.
C
C        2) To show how the apparent, true, or geometric state
C           (inertially referenced cartesian position and velocity)
C           of one solar system body relative to another solar
C           system body may be calculated.
C
C     The SPICELIB subroutine SPKLEF { S/P Kernel, Load Ephemeris File }
C     handles the first task by maintaining a database of ephemeris
C     files. The calling program indicates which files are to be loaded
C     by passing their names to SPKLEF.
C
C     SPKEZR { S/P Kernel, Easy reader } handles the second task by
C     accessing the data loaded with SPKLEF (SPKEZR does not require
C     the name of an SPK file as input).
C
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Input
C
C     The user is prompted for the following input:
C
C        - The name of a NAIF leapseconds kernel file.
C        - The name of a NAIF binary SPK ephemeris file.
C        - A NAIF ID for the observing body.
C        - A Naif ID for the target body.
C        - The number of states to be calculated.
C        - A UTC time at which to begin.
C        - A UTC time at which to end.
C        - An inertial reference frame, i.e., 'J2000'.
C        - The type of aberration correction desired.
C
C$ Output
C
C        - The state of the target body relative to the observing body.
C        - The one-way light-time from the target body to the observing
C          body.
C
C$ Particulars
C
C     The user supplies a NAIF leapseconds kernel file, a NAIF binary
C     SPK ephemeris file, NAIF IDs for both the target and observing
C     bodies, the end points of a valid time interval for which states
C     of the target body are to be calculated, and the number of
C     states to be calculated for the given time interval. The time
C     interval is divided into equally spaced times based on the
C     number of states to be calculated, and the state of the target
C     body as seen from the observing body is calculated and displayed
C     on the screen for each of the times in the given time interval.
C
C     Note that the `target body' and the `observing body' are both
C     NAIF ephemeris objects which are identified by integer codes,
C     see NAIF IDs Required Reading, and may be any of the following,
C     provided that ephemeris data are available for them in the SPK
C     file:
C
C        - a spacecraft
C        - a planet or satellite mass center
C        - a planet barycenter
C        - the sun
C        - the solar system barycenter
C        - a comet
C        - an asteroid
C
C     By definition, the ephemerides in SPK files are continuous. The
C     user can obtain states for any epoch within the interval of
C     coverage. Epochs are always specified in ephemeris seconds past
C     Julian year 2000 when accessing SPK files.
C
C     The ephemeris data in a single SPK file may be referenced to a
C     number of different inertial frames. Because any two inertial
C     frames differ by a simple rotation, states returned by SPKEZR do
C     not have to refer to their native frames.  The user can specify
C     that states are to be returned in any of the recognized frames
C     listed in the NAIF IDs Required Reading, including J2000 and
C     B1950.
C
C     SPKEZR returns apparent, true, or geometric states depending on
C     the value of the aberration flag when it is called.
C
C      Flag    Type of correction              State computed by SPKEZR
C     ------------------------------------------------------------------
C     'LT+S'   light-time and stellar aberration               Apparent
C     'LT'     light-time only                                     True
C     'NONE'   no correction                                  Geometric
C
C     For the sake of brevity, this program does NO error checking
C     on its inputs. Mistakes will cause the program to crash. But
C     since this is an example program, that's OK.
C
C$ References
C
C     For additional information, see NAIF IDS Required Reading, and
C     the headers of the SPICELIB subroutines FURNSH and SPKEZR.
C
C$ Version
C
C-    SPICELIB Version 3.5.0, 10-JUL-2002 (EDW)
C
C        Replace NPARSI call with PRSINT.
C
C-    SPICELIB Version 3.5.0, 10-JUL-2002 (EDW)
C
C        Replaced all load routines (if appropriate) with
C        FURNSH calls. Replaced WRITE(*,*) with CALL TOSTDO
C        (if appropriate); replaced READ(*,*) with CALL PROMPT
C        and CALL NPARSI.
C
C        Corrected PREC variable declaration INTEGER from
C        DOUBLE PRECISION.
C
C        Replaced SPKEZ call with SPKEZR.      
C     
C-    SPICELIB Version 2.2.1, 03-NOV-2000 (EDW)
C
C        Added a BYEBYE( 'SUCCESS' ) call at program's end.
C
C-  Version 2.2.0, 5-AUG-1994 (HAN)
C
C        Initialized the variable MAXPTS to zero.
C
C-    SPICELIB Version 2.1.0, 12-AUG-1993 (KRG)
C
C        Added a prompt for a reference frame so that the code would
C        agree with the header.
C
C        Fixed a division by zero hazard when a user would input 1
C        for the number of states.
C
C-    SPICELIB Version 2.0.0, 01-APR-1992 (KRG)
C
C        Modified and cleaned up the comments.
C
C        Reordered first two prompts so that the leapseconds
C        prompt appeard first, to be consistent with the other
C        'cookbook' programs.
C
C        Changed the variable name EPOCH to ET to be consistent
C        with the other 'cookbook' programs.
C
C        Added  'Working ... Please wait' message.
C
C        Removed the 'real number' logical test ET .LE. ETEND
C        from the DO WHILE loop and replaced it with an INTEGER
C        logical test I .LE. MAXPTS. This was done because the
C        'real number' version might not terminate the loop
C        correctly.
C
C-    Beta Version 1.0.0, 25-SEP-1990 (JEM)
C
C-&
 
C
C     SPICELIB Functions
C
      DOUBLE PRECISION      VNORM
 
C
C     Parameters
C
      CHARACTER*(*)         D2COL
      PARAMETER           ( D2COL = '(2X,A11,E23.16,5X,E23.16)' )
 
      INTEGER               FILEN
      PARAMETER           ( FILEN  = 128 )
 
      INTEGER               STRLEN
      PARAMETER           ( STRLEN =  32 )
 
C
C     Variables
C
      CHARACTER*(1)         CONTIN
      CHARACTER*(1)         FORMAT
      CHARACTER*(80)        LINE
      CHARACTER*(FILEN)     EPHEM
      CHARACTER*(FILEN)     KERNEL
      CHARACTER*(STRLEN)    ABCORR
      CHARACTER*(STRLEN)    FRAME
      CHARACTER*(STRLEN)    UTC
      CHARACTER*(STRLEN)    UTCBEG
      CHARACTER*(STRLEN)    UTCEND
      CHARACTER*(STRLEN)    OBSRVR
      CHARACTER*(STRLEN)    TARGET
      
      DOUBLE PRECISION      DELTA
      DOUBLE PRECISION      ET
      DOUBLE PRECISION      ETBEG
      DOUBLE PRECISION      ETEND
      DOUBLE PRECISION      LT
      DOUBLE PRECISION      STATE  ( 6 )

      INTEGER               I
      INTEGER               MAXPTS
      INTEGER               PREC

      
      DATA                  MAXPTS   / 0 /

      SAVE
 
C
C     Introduction.
C
      CALL TOSTDO(' '                                                  )
      CALL TOSTDO('                Welcome to STATES'                  )
      CALL TOSTDO(' '                                                  )
      CALL TOSTDO('This program demonstrates the use of NAIF S- and P-')
      CALL TOSTDO('Kernel (SPK) files and subroutines by computing the')
      CALL TOSTDO('state of a target body as seen from an observing'   )
      CALL TOSTDO('body at a number of epochs within a given time'     )
      CALL TOSTDO('interval.'                                          )
      CALL TOSTDO(' '                                                  )
 
C
C     Get all of the required inputs.
C
      CALL TOSTDO ( ' ' )
      CALL PROMPT ('Enter the name of a leapseconds kernel file: ',
     .              KERNEL )
      CALL TOSTDO ( ' ' )

C
C     First load the leapseconds file into the kernel pool, so
C     we can convert the UTC time strings to ephemeris seconds
C     past J2000.
C
      CALL FURNSH ( KERNEL )

 
      CALL PROMPT ('Enter the name of a binary SPK ephemeris file: ',
     .              EPHEM )
      CALL TOSTDO ( ' ' )

C
C     Load the binary SPK file containing the ephemeris data
C     that we need.
C
      CALL FURNSH ( EPHEM )


      CALL PROMPT ('Enter the name of the observing body: ', OBSRVR )
      CALL TOSTDO ( ' ' )
      
      CALL PROMPT ('Enter the name of a target body: ', TARGET )
      CALL TOSTDO ( ' ' )
 
      DO WHILE ( MAXPTS .LE. 0 )
         CALL PROMPT( 'Enter the number of states to be calculated: ',
     .                 LINE )
         CALL PRSINT ( LINE, MAXPTS )
         CALL TOSTDO( ' ' )

         IF ( MAXPTS .LE. 0 ) THEN
            CALL TOSTDO( 'The number of states must be greater than 0.')
            CALL TOSTDO( ' ' )
         END IF
         
      END DO
 
      IF ( MAXPTS .EQ. 1 ) THEN
         CALL PROMPT ( 'Enter the UTC time: ', UTCBEG )
         CALL TOSTDO( ' ' )
      ELSE
         CALL PROMPT ( 'Enter the beginning UTC time: ', UTCBEG )
         CALL TOSTDO( ' ' )
 
         CALL PROMPT ( 'Enter the ending UTC time: ', UTCEND )
         CALL TOSTDO( ' ' )
      END IF
 
      CALL PROMPT ('Enter the inertial reference frame (eg:J2000): ',
     .              FRAME )
      CALL TOSTDO( ' ' )
 
      CALL TOSTDO( 'Type of correction                          '//
     .            '    Type of state')
      CALL TOSTDO( '-----------------------------------------------'//
     .            '--------------')
      CALL TOSTDO( '''LT+S''    Light-time and stellar aberration'//
     .            '    Apparent state')
      CALL TOSTDO( '''LT''      Light-time only                  '//
     .            '    True state')
      CALL TOSTDO( '''NONE''    No correction                    '//
     .            '    Geometric state')
      CALL TOSTDO( ' ' )
      CALL PROMPT ( 'Enter LT+S, LT, or NONE: ', ABCORR )
 
      CALL TOSTDO( ' ' )
      CALL TOSTDO( 'Working ... Please wait' )
      CALL TOSTDO( ' ' )
 
 
C
C     Convert the UTC time strings into DOUBLE PRECISION ETs.
C
      IF ( MAXPTS .EQ. 1 ) THEN
         CALL STR2ET ( UTCBEG, ETBEG )
      ELSE
         CALL STR2ET ( UTCBEG, ETBEG )
         CALL STR2ET ( UTCEND, ETEND )
      END IF
 
 
C
C     At each time, compute and print the state of the target body
C     as seen by the observer.  The output time will be in calendar
C     format, rounded to the nearest seconds.
C
C     DELTA is the increment between consecutive times.
C
C     Make sure that the number of points is >= 1, to avoid a
C     division by zero error.
C
      IF ( MAXPTS .GT. 1 ) THEN
         DELTA  = ( ETEND - ETBEG ) / DBLE(MAXPTS - 1)
      ELSE
         DELTA = 0.0D0
      END IF
      ET  =   ETBEG
 
C
C     Set some formatting stuff for the ET2UTC SPICELIB routine.
C
      FORMAT = 'C'
      PREC   =  0
 
C
C     Initialize the continuation flag.
C
      CONTIN = 'Y'
 
      I = 1
 
      DO WHILE ( I .LE. MAXPTS )
 
C
C        Calculate the state of the target.
C
         CALL SPKEZR ( TARGET, ET, FRAME, ABCORR, OBSRVR, STATE, LT )
 
C
C        Convert the ET (ephemeris time) into a UTC time string
C        for displaying on the screen.
C
         CALL ET2UTC ( ET, FORMAT, PREC, UTC )
 
C
C        Display the results of the state calculation.
C
         LINE = 'For time # of #, the state of:'
         CALL REPMI(LINE,'#',I,LINE)
         CALL REPMI(LINE,'#',MAXPTS,LINE)
         CALL TOSTDO( LINE )
         
         LINE = 'Body            : #'
         CALL REPMC(LINE,'#',TARGET,LINE)
         CALL TOSTDO( LINE )
         
         LINE = 'Relative to body: #'
         CALL REPMC(LINE,'#',OBSRVR,LINE)
         CALL TOSTDO( LINE )
         
         LINE = 'In Frame        : #'
         CALL REPMC(LINE,'#',FRAME,LINE)
         CALL TOSTDO( LINE )
         
         LINE = 'At UTC time     : #'
         CALL REPMC(LINE,'#',UTC,LINE)
         CALL TOSTDO( LINE )
         CALL TOSTDO( ' '  )
         CALL TOSTDO( '                 Position (km)              '//
     .               'Velocity (km/s)')
         CALL TOSTDO( '            -----------------------     '//
     .               '-----------------------' )
         WRITE (*,FMT=D2COL) '        X: ',STATE(1),STATE(4)
         WRITE (*,FMT=D2COL) '        Y: ',STATE(2),STATE(5)
         WRITE (*,FMT=D2COL) '        Z: ',STATE(3),STATE(6)
         WRITE (*,FMT=D2COL) 'MAGNITUDE: ',VNORM(STATE(1)),
     .                                     VNORM(STATE(4))
         CALL TOSTDO( ' '  )
 
         IF ( I .LT. MAXPTS ) THEN
            CALL TOSTDO( ' '  )
            CALL PROMPT ( 'Continue? (Enter Y or N): ', CONTIN )
         END IF
 
C
C        If the continuation flag is a 'small' Y, 'y', then change
C        it to a capital Y.
C
         IF ( CONTIN .EQ. 'y' ) THEN
            CONTIN = 'Y'
         ELSE IF ( CONTIN .EQ. ' ' ) THEN
            CONTIN = 'Y'
         END IF

C
C        Perform a logical test to see if the user wants to
C        continue. If not, set the value of I to MAXPTS+1.
C
         IF ( CONTIN .NE. 'Y' ) THEN
            I = MAXPTS + 1
         END IF
 
C
C        Increment the current ET by DELTA and increment the loop
C        counter.
C
         ET = ET + DELTA
         I = I + 1
 
      END DO

      CALL BYEBYE( 'SUCCESS' )
      END
