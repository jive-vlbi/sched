C$Procedure      CHCKID ( Check ID string )

      SUBROUTINE CHCKID ( CLASS, MAXLEN, ID )

C$ Abstract
C
C     Validate an ID string:  check for non-printing characters
C     or excessive non-blank length.
C
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Required_Reading
C
C     None.
C
C$ Keywords
C
C     STRING
C     UTILITY
C
C$ Declarations
 
      CHARACTER*(*)         CLASS
      INTEGER               MAXLEN
      CHARACTER*(*)         ID
      
C$ Brief_I/O
C
C     Variable  I/O  Description
C     --------  ---  --------------------------------------------------
C     CLASS      I   A description of the class to which ID belongs.
C     MAXLEN     I   Maximum allowed non-blank length of ID.
C     ID         I   The ID string to be validated.
C     
C$ Detailed_Input
C
C     CLASS          is a descriptive string indicating the type of
C                    object represented by ID.  Examples are
C                    'SPK segment identifier', 'DAF internal file name',
C                    or 'EK table name'.
C
C                    If the input ID is found to be invalid, CLASS is
C                    used in the error message generated by this 
C                    routine.
C
C     MAXLEN         is the maximum allowed non-blank length of the
C                    input ID string.  If ID has any non-blank 
C                    characters at positions greater than MAXLEN,
C                    an error will be signalled.
C
C     ID             is the input ID string to be checked.  In order
C                    to be considered valid, ID must contain only 
C                    printing characters and must satisfy the condition
C
C                       LASTNB( ID )  <  MAXLEN
C                                     -
C                        
C$ Detailed_Output
C     
C     None.  See $Particulars for a description of the effect of this
C     routine.
C     
C$ Parameters
C     
C     None.
C     
C$ Exceptions
C
C     1)  If ID contains any nonprintable characters, the error 
C         SPICE(NONPRINTABLECHARS) is signalled.
C     
C     2)  If MAXLEN is non-positive, the error SPICE(INVALIDCOUNT) is
C          signalled.
C
C     3)  If ID contains any non-blank characters past position
C         MAXLEN, the error SPICE(IDSTRINGTOOLONG) is signalled.
C
C     4)  If CLASS contains any non-printing characters, the error
C         SPICE(NONPRINTABLECHARS) is signalled.
C
C     5)  CLASS is allowed to be blank.  The word 'ID' is used in
C         place of the class string in any error messages in this
C         case.
C
C     6)  Error messages signalled by this routine have a maximum
C         length of 320 characters.  If substitution of CLASS and
C         ID into the long messages causes overflow, the messages
C         will be truncated on the right.
C
C$ Files
C
C     None.
C
C$ Particulars
C
C     This routine operates by side effects:  it validates an ID string
C     and signals an error if the ID has either of the following 
C     problems:
C
C        - There are non-printing characters in the ID string.
C
C        - The last non-blank character in the string occurs at a 
C          location having index higher than a specified value.
C
C     The error message signalled by this routine contains the offending
C     ID string and indicates the class of item to which ID belongs.
C     The form of the message is:
C
C         The <CLASS> <'ID'> is invalid; <reason>
C
C$ Examples
C
C     1)  If 
C
C            CLASS  = 'segment identifier' 
C            MAXLEN =  40
C
C         and 
C
C            ID = 'Example EK created on March 28, 1995 by NJB/NAIF'
C      
C         the error message
C
C            The segment identifier 'Example EK created on March 28, 
C            1995 by NJB/NAIF' is invalid; the last non-blank character
C            is located at position 48.
C
C         will be signalled.
C
C$ Restrictions
C
C     None.   
C
C$ Literature_References
C
C     None.
C
C$ Author_and_Institution
C
C     N.J. Bachman   (JPL)
C
C$ Version
C
C-    SPICELIB Version 1.0.0, 16-JUN-1995 (NJB) 
C
C-&

C$ Index_Entries
C
C     check an ID string
C     validate an ID string
C     
C-&

C
C     SPICELIB functions
C
      INTEGER               FRSTNP
      INTEGER               LASTNB
      LOGICAL               RETURN

C
C     Local variables
C
      INTEGER               CHRCOD
      INTEGER               I
      INTEGER               L

C
C     Standard SPICE error handling.
C
      IF ( RETURN () ) THEN
         RETURN
      ELSE
         CALL CHKIN ( 'CHCKID' )
      END IF

C
C     Check CLASS before trying to use it in an error message.
C
      I  =  FRSTNP( CLASS )
      
      IF ( I .GT. 0 ) THEN
      
         CHRCOD = ICHAR( CLASS(I:I) )
         
         CALL SETMSG ( 'The class string ''#'' is invalid; '  //
     .                 'this string contains a non-printing ' //
     .                 'character (ICHAR = #) at position #.'  )
         CALL ERRCH  ( '#', CLASS                              )
         CALL ERRINT ( '#', CHRCOD                             )
         CALL ERRINT ( '#', I                                  )
         CALL SIGERR ( 'SPICE(NONPRINTABLECHARS)'              )
         CALL CHKOUT ( 'CHCKID'                                )
         RETURN
            
      END IF

C
C     MAXLEN must be a sensible value.
C
      IF ( MAXLEN .LT. 1 ) THEN
         
         CALL SETMSG ( 'Non-blank length limit MAXLEN should be '  //
     .                 'positive but was #.'                        )
         CALL ERRINT ( '#',   MAXLEN                                )
         CALL SIGERR ( 'SPICE(INVALIDCOUNT)'                        )
         CALL CHKOUT ( 'CHCKID'                                     )
         RETURN
         
      END IF
      
      
      L  =  LASTNB( ID )

C
C     The ID must not be too long.
C
      IF ( L .GT. MAXLEN ) THEN
      
         CALL SETMSG ( 'The # ''#'' is invalid; the last non-blank '//
     .                 'character is located at position #; the '   //    
     .                 'maximum allowed length is #.'               )
     
         IF ( CLASS .NE. ' ' ) THEN
            CALL ERRCH ( '#', CLASS )
         ELSE
            CALL ERRCH ( '#', 'ID' )
         END IF
         
         CALL ERRCH  ( '#', ID                  )
         CALL ERRINT ( '#', L                   )
         CALL ERRINT ( '#', MAXLEN              )
         CALL SIGERR ( 'SPICE(IDSTRINGTOOLONG)' )
         CALL CHKOUT ( 'CHCKID'                 )
         RETURN
         
      END IF

C
C     Look for non-printing characters in ID.
C     
      I  = FRSTNP ( ID )
      
      IF ( I .GT. 0 ) THEN
      
         CHRCOD = ICHAR( ID(I:I) )
         
         CALL SETMSG ( 'The # ''#'' is invalid; this string ' //
     .                 'contains a non-printing character '   //
     .                 '(ICHAR = #) at position #.'            )
     
         IF ( CLASS .NE. ' ' ) THEN
            CALL ERRCH ( '#', CLASS )
         ELSE
            CALL ERRCH ( '#', 'ID' )
         END IF
      
         CALL ERRCH  ( '#', ID                    )
         CALL ERRINT ( '#', CHRCOD                )
         CALL ERRINT ( '#', I                     )
         CALL SIGERR ( 'SPICE(NONPRINTABLECHARS)' )
         CALL CHKOUT ( 'CHCKID'                   )
         RETURN
            
      END IF
            
      CALL CHKOUT ( 'CHCKID' )
      RETURN
      END
      
      
