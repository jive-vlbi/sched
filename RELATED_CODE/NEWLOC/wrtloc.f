      SUBROUTINE WRTLOC
C
C     Routine for NEWLOC that writes a new file like the SCHED catalog
C     locations.dat.  It will have the stations in the geodetic stations
C     catalog and the VLA pads.  Elsewhere, stations not in either of
C     those will need to be added.
C
C     VLA_N8 will be from the VLA list and VLA-N8 from the geo list.
C
      INCLUDE 'newloc.inc'
C      INCLUDE 'rdcat.inc'
C
      INTEGER     LEN1, IER, IS
C ----------------------------------------------------------------------
C
C     Get the file name.
C
      WRITE(*,*) 'New locations file name: '
      READ(*,'(A)') NEWLOCF
      OPEN( UNIT=13, FILE=NEWLOCF, STATUS='NEW', ACCESS='SEQUENTIAL',
     1      FORM='FORMATTED', IOSTAT=IER )
      WRITE(*,'( A, I3, 2X, A )') 'Opening new locations file on unit ', 
     1      13, NEWLOCF
      WRITE(*,*) '  OPEN error code: ', IER, '   0 means opened ok.'
C
C  ------------  Toss this - not reading old catalog any more  -------
C     For any stations not in the new data, copy over the old data
C     from Locations.dat.
C
C      DO IS = 1, NS
C         IF( GOTPOS(IS) .EQ. ' ' ) THEN
C            GOTPOS(IS) = 'LOC'
C            GOTRAT(IS) = 'LOC'
C            VLBIX(IS)  = DBX(IS)
C            VLBIY(IS)  = DBY(IS)
C            VLBIZ(IS)  = DBZ(IS)
C            VLBIEX(IS) = 0.D0
C            VLBIEY(IS) = 0.D0
C            VLBIEZ(IS) = 0.D0
C            VLBIRX(IS) = DBDX(IS)
C            VLBIRY(IS) = DBDY(IS)
C            VLBIRZ(IS) = DBDZ(IS)
C            VLBIOF(IS) = DBOFF(IS)
C            VLBIJDAY(IS) = DBEPO(IS)
C            FRAME(IS)  = DBFRM(IS)
C         END IF
C      END DO
C  -------------- End of toss part.
C
C     Write the file.
C
      WRITE( 13, '( A )' ) '! Locations file for SCHED'
      WRITE( 13, '( A )' ) 
     1   '! Generated by NEWLOC from Geodesy and VLA files'
      WRITE( 13, '( A )' ) '! '
      WRITE( 13, '( 2A )' ) 
     1   '! The stations file should contain DBNAME with the same',
     2   ' name as below.'
      WRITE( 13, '( A )' ) '! After Sept. 28, 2011, this file '//
     1   'no longer contains DBCODE or AXISTYPE. '
      WRITE( 13, '( 2A )' ) '! It does contain a BEGIN and END date ',
     1   '(MJD) for when the position applies.'
      WRITE( 13, '( 2A )' ) '! This deals with jumps at earthquakes ',
     2   ' etc.'
      WRITE( 13, '( A )' ) '! '
C
      DO IS = 1, NS
         WRITE( 13, '( 6X, A,A, A, F8.1, A, F9.1, A,F8.4 )' )
     1     '  DBNAME=', STA(IS),
     2     '  BEGIN=', VLBIBEG(IS),
     3     '  END=', VLBIEND(IS),
     4     '  AXISOFF=', VLBIOF(IS)

C     1     '  DBCODE=', DBCODE(IS)(1:LEN1(DBCODE(IS))), 
C     3     '  AXISTYPE=', DBDBA(IS),

         WRITE( 13, '( 2X, A, F14.4, A, F14.4, A, F14.4 )' )
     1     '  X=', VLBIX(IS),
     2     '  Y=', VLBIY(IS),
     3     '  Z=', VLBIZ(IS)
         WRITE( 13, '( 2X, A, F9.5, A, F9.5, A, F9.5, A, I5 )' )
     1     '  DXDT=',  VLBIRX(IS),
     2     '  DYDT=',  VLBIRY(IS),
     3     '  DZDT=',  VLBIRZ(IS),
     4     '  EPOCH=', VLBIJDAY(IS)
         WRITE( 13, '( 2X, A, A, A )' )
     1     '  FRAME=''', FRAME(IS)(1:LEN1(FRAME(IS))), ''''
         WRITE( 13, '( ''/'' )' )
      END DO
C
      RETURN
      END
