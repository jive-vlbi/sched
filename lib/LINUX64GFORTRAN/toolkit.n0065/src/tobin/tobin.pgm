C$Procedure   TOBIN (Create a binary kernel for use on this machine)

      PROGRAM TOBIN
      IMPLICIT NONE

C$ Abstract
C
C     TOBIN is a utility program that converts a SPICE transfer format 
C     file into it's binary format for use in a particular computing 
C     environment.
C       
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Input
C
C     TOBIN requires at least the input transfer file name on the 
C     command line. Optionally, a name for the output binary file may
C     be specified. If a name for the output file is provided on the 
C     command line it overrides the automatic naming conventions used
C     by the program.
C
C     If only the name of the input transfer file is provided on the 
C     command line, TOBIN will generate a name for the output binary 
C     kernel file with the same base name as the input transfer file 
C     and an appropriate filename extension, based on the filename 
C     extension of the transfer file. If TOBIN does not recognize the 
C     filename extension of the input transfer file, or there is no 
C     filename extension on the input transfer file, a filename 
C     extension of '.bin' will be used as the filename extension of the 
C     output binary file.
C
C     If a filename for the output binary kernel is provided on the 
C     command line it will be used as the name of the output file 
C     regardless of the name of the input transfer file.
C     
C     TOBIN recognizes the filename extensions in the left hand column 
C     below and converts them into the corresponding filename 
C     extensions in the right hand column.
C
C        'tc'   --> 'bc'
C        'tee'  --> 'bee'
C        'tpc'  --> 'bpc'
C        'tsp'  --> 'bsp'
C        'xc'   --> 'bc'
C        'xee'  --> 'bee'
C        'xpc'  --> 'bpc'
C        'xsp'  --> 'bsp'
C     
C$ Output
C
C     TOBIN creates a binary format kernel file from the input transfer 
C     file specified on the command line.
C
C$ Particulars
C
C     The usage of TOBIN is shown below:
C     
C     tobin input_file [output_file]
C     
C     The first word following the command must be the input filename 
C     and the second if it appears, must be the output file name.
C     
C     If the output file already exists, TOBIN signals an error and 
C     stops. We assume that it is bad form to stomp on a file without 
C     telling you about it.
C
C     The text transfer file may include text data preceding the line
C     identifying the file as a SPICE transfer file.  An example of such
C     an ID info line:
C
C        DAFETF NAIF DAF ENCODED TRANSFER FILE
C
C     A transfer file with some sort of non-SPICE text header has the
C     structure:
C
C        ___________
C       |
C       |
C       |
C       |   ...some text...
C       |
C       |
C       |
C       |___________
C       DAFETF NAIF DAF ENCODED TRANSFER FILE
C             ...unmodified transfer file text....
C
C     The text preceding the info line is ignored:  WARNING, if
C     the text header contains a valid SPICE ID string (DAFETF
C     for example), the program assumes all data after that line
C     is the transfer file data.  Something will break.
C
C$ Examples
C
C     Example 1:
C
C        Convert the transfer file 'ephem.xsp' into a binary kernel 
C        file.
C
C           > tobin ephem.xsp
C
C        This will create the binary kernel file 'ephem.bsp'.
C
C     Example 2:
C
C        This is the same as Example 1, except we explicitly set the 
C        output filename on the command line.
C
C           > tobin ephem.xsp myephem.bsp
C
C        This will create the binary kernel file 'myephem.bsp'.
C
C     Example 3:
C
C        For this example, we provide a filename extension on the input 
C        transfer file that TOBIN does not recognize.
C
C           > tobin mydata.ttt
C
C        This will create the binary file 'mydata.bin'.
C
C$ References
C
C     For additional information, see the TOBIN User's Guide.
C  
C$ Version
C
C-    SPICELIB Version 1.4.0  28-APR-2014 (BVS)
C
C        Updated to return with success or failure status.
C
C-    SPICELIB Version 1.3.0  17-FEB-2004 (EDW) (BVS)
C
C        Added line terminator test via ZZASCII call that will signal
C        an error if the input text file is not native to the current
C        platform.
C
C-    SPICELIB Version 1.2.0  20-MAR-1999 (EDW)
C
C        Operation of the binary to transfer function enhanced to
C        accomodate SFDUs.  See the routines: ZZGETFAT 1.0.0;
C        ZZCONVTB 1.0.0 for details.
C
C-    SPICELIB Version 1.1.0, 07-DEC-1995 (KRG)
C
C        Changed the search direction for the dot '.' in a file name.
C        The search is now performed from right to left, so problems 
C        with using ".." to refer to the parent directory in UNIX and 
C        DOS are fixed.
C
C        Also, now only the base name of the file is searched for the
C        extension.
C
C-    SPICELIB Version 1.0.0, 11-AUG-1995 (KRG)
C
C-&

C     
C     Spicelib functions
C     
      INTEGER               CARDI
      INTEGER               CPOSR
      INTEGER               ISRCHC
      INTEGER               RTRIM

      LOGICAL               EXISTS
      LOGICAL               FAILED

C     
C     Parameters
C
C     Lower bound for a SPICELIB CELL data structure.
C
      INTEGER               LBCELL
      PARAMETER           ( LBCELL = -5 )
C
C     Maximum number of open binary files allowed.
C
      INTEGER               MAXOPN
      PARAMETER           ( MAXOPN = 1 )
C
C     Maximum number fo file extensions (types).
C
      INTEGER               MAXTYP
      PARAMETER           ( MAXTYP = 8 )
C
C     Line length.
C
      INTEGER               LINLEN
      PARAMETER           ( LINLEN = 512 )
C
C     Filename length.
C
      INTEGER               FNMLEN
      PARAMETER           ( FNMLEN = 128 )
C
C     Filename extension length.
C
      INTEGER               EXTLEN
      PARAMETER           ( EXTLEN = 3 )
C
C     Decimal code for the backslash character, '\'.
C
      INTEGER               IBSLSH
      PARAMETER           ( IBSLSH = 92 )

C
C     Set the length for the type of a file.
C
      INTEGER               TYPLEN
      PARAMETER           ( TYPLEN = 4 )
C
C     Set the length for the architecture of a file.
C
      INTEGER               ARCLEN
      PARAMETER           ( ARCLEN = 3 )


C
C     Set sizes of EOL type string and buffer string used to 
C     call ZZASCII.
C
      INTEGER               EOLTSZ
      PARAMETER           ( EOLTSZ = 5 )

      INTEGER               KLINSZ
      PARAMETER           ( KLINSZ = 132 )
 
C
C     Local variables
C
      CHARACTER*(ARCLEN)    ARCH
      CHARACTER*(TYPLEN)    TYPE
      CHARACTER*(EXTLEN)    BINEXT(MAXTYP)
      CHARACTER*(FNMLEN)    BINFNM
      CHARACTER*(1)         BSLASH
      CHARACTER*(EXTLEN)    EXTNSN
      CHARACTER*(LINLEN)    LINE
      CHARACTER*(3)         PTHCHR
      CHARACTER*(EXTLEN)    XFREXT(MAXTYP)
      CHARACTER*(FNMLEN)    XFRFNM
      CHARACTER*(EOLTSZ)    TERMIN
      CHARACTER*(KLINSZ)    KERLIN

      INTEGER               BASBEG
      INTEGER               DOTPOS
      INTEGER               I
      INTEGER               IDXEXT
      INTEGER               NUMBER
      INTEGER               NUMOPN
      INTEGER               OPNSET(LBCELL:MAXOPN)

C
C     Save everthing to keep configuration control happy.
C
      SAVE

C
C     Initial values.
C
      DATA                  BINEXT / 'BSP', 'BC', 'BEE', 'BPC',
     .                               'BSP', 'BC', 'BEE', 'BPC' /
      DATA                  XFREXT / 'TSP', 'TC', 'TEE', 'TPC',
     .                               'XSP', 'XC', 'XEE', 'XPC' /
C
C     Check into the error handling.
C
      CALL CHKIN  ( 'TOBIN' )
C
C     Set the error action to ABORT mode. For the first part of the 
C     program we want to halt execution if an error occurs. Before the 
C     conversion, we set the error action to RETURN mode so that we can 
C     clean up if the conversion failed.
C
      CALL ERRACT ( 'SET', 'ABORT' )
C
C     Set the error messages that are printed.
C
      CALL ERRPRT ( 'SET', 'NONE, SHORT, LONG, TRACEBACK' )
C
C     Set the value of the backslash character.
C
      BSLASH = CHAR ( IBSLSH )
C     
C     Get the command line arguments.
C           
      CALL GETCML ( LINE )
C     
C     The minimum information we need to convert a file is the name of 
C     the transfer file that is to be converted. We figure out the 
C     extension for the output file from the extension of the input 
C     file. If an output file name is provided that is used instead.
C                
      IF ( LINE .EQ. ' ' ) THEN
         
         CALL SETMSG ( 'Usage: tobin file.x* [file.b*]' )
         CALL SIGERR ( 'SPICE(USAGEERROR)'                )
            
      END IF
C
C     Get the transfer filename. If there is a second filename for the 
C     binary output file it will automatically appear in BINFNM.
C
      CALL NEXTWD ( LINE, XFRFNM, BINFNM )
C
C     If there was no binary filename, figure out the extension for the 
C     output file from the extension for the input file. If the 
C     extension is not recognized, or there is no extension, the 
C     extension '.bin' will be used. We search only the base name in 
C     reverse. The base name is that part of the file name after
C     the last directory separator, a '/', '\', or ']'.
C
      IF ( BINFNM .EQ. ' ' ) THEN

         PTHCHR = '/]' // BSLASH

         BASBEG = CPOSR ( XFRFNM, PTHCHR, RTRIM(XFRFNM) ) + 1

         DOTPOS = CPOSR ( XFRFNM(BASBEG:), '.', RTRIM(XFRFNM(BASBEG:)) )

         IF ( DOTPOS .GT. 0 ) THEN

            DOTPOS = DOTPOS + BASBEG - 1
            EXTNSN = XFRFNM(DOTPOS+1:DOTPOS+3)
            CALL UCASE ( EXTNSN, EXTNSN )
            IDXEXT = ISRCHC( EXTNSN, MAXTYP, XFREXT )

            IF ( IDXEXT .GT. 0 ) THEN

               EXTNSN = BINEXT(IDXEXT)
               CALL LCASE ( EXTNSN, EXTNSN )
               BINFNM = XFRFNM(1:DOTPOS)//EXTNSN

            ELSE

               BINFNM = XFRFNM(1:DOTPOS)//'bin'

            END IF

         ELSE

            BINFNM = XFRFNM(1:RTRIM(XFRFNM))//'.bin'

         END IF

      ELSE

         CALL LJUST ( BINFNM, BINFNM )

      END IF
C
C     If the output name already exists, we do not overwrite it, so 
C     signal an error.
C
      IF ( EXISTS ( BINFNM ) ) THEN
         CALL SETMSG ( 'The output file ''#'' already exists.' )
         CALL ERRCH  ( '#', BINFNM                             )
         CALL SIGERR ( 'SPICE(FILEALREADYEXISTS)'              )
      END IF

      CALL REPMC ( 'Converting: #', '#', XFRFNM, LINE ) 
      CALL TOSTDO ( LINE )
      CALL REPMC ( '        To: #', '#', BINFNM, LINE ) 
      CALL TOSTDO ( LINE )

C
C     Set the error action to return mode so that we can clean up if 
C     there is an error.
C
      CALL ERRACT ( 'SET', 'RETURN' )

C
C     Check for line terminator compatibility with this platform.
C
      CALL ZZASCII( XFRFNM, KERLIN, .TRUE., TERMIN )

C
C     Convert the file.
C
      CALL ZZGETFAT ( XFRFNM, ARCH, TYPE, NUMBER )
      CALL ZZCONVTB ( XFRFNM, ARCH, TYPE, BINFNM, NUMBER )

      IF ( FAILED () ) THEN
C
C     If we failed, reset the error handling and delete the binary file 
C     that we were creating if it exists.
C
         CALL RESET
         CALL SCARDI ( 0, OPNSET         )
         CALL CLEARI ( MAXOPN, OPNSET(1) )
C
C        Get the handles for any DAF files which may still be 
C        open and close them.
C
         CALL DAFHOF    ( OPNSET )
         NUMOPN = CARDI ( OPNSET )

         IF ( NUMOPN .GT. 0 ) THEN
            DO I = 1, NUMOPN
               CALL DAFCLS ( OPNSET(I) )
            END DO
         END IF
C
C        Clear out any binary file handles in the open set, 
C        OPNSET.
C
         CALL SCARDI ( 0,      OPNSET    )
         CALL CLEARI ( MAXOPN, OPNSET(1) )
C
C        Get the handles for any DAS files which may still be 
C        open and close them.
C
         CALL DASHOF    ( OPNSET )
         NUMOPN = CARDI ( OPNSET )

         IF ( NUMOPN .GT. 0 ) THEN

            DO I = 1, NUMOPN
               CALL DASCLS ( OPNSET(I) )
            END DO

         END IF

         IF ( EXISTS ( BINFNM ) ) THEN
            CALL DELFIL( BINFNM )
         END IF
C
C        Call RESET one more time just in case there was an 
C        error closing of deleting the file.
C
         CALL RESET

C
C        Stop with failure status.
C        
         CALL BYEBYE( 'FAILURE' )

      END IF

      CALL CHKOUT ( 'TOBIN' )

C
C     Stop with success status.
C        
      CALL BYEBYE( 'SUCCESS' )

      END
