C$Procedure   TOXFR (Create a transfer file for porting data)

      PROGRAM TOXFR
      IMPLICIT NONE

C$ Abstract
C
C     TOXFR is a utility program that converts a SPICE binary kernel 
C     file into a transfer file format that is used to transfer, or 
C     port, the binary data to a different computing environment.
C       
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Input
C
C     TOXFR requires at least the name of the input binary file on the
C     command line. Optionally, a name for the output transfer file may
C     be specified. If a name for the output file is provided on the
C     command line it overrides the automatic naming conventions used
C     by the program.
C
C     If only the name of the input binary file is provided on the
C     command line, TOXFR will generate a name for the output transfer
C     file that has the same base name as the input binary file and an
C     appropriate filename extension, based on the filename extension
C     of the binary file. If TOXFR does not recognize the filename
C     extension of the input binary file, or there is no filename
C     extension on the input binary file, a filename extension of
C     '.xfr' will be used as the filename extension of the output
C     transfer file.
C
C     If a filename for the output transfer file is provided on the 
C     command line it will be used as the name of the output transfer 
C     file regardless of the name of the input binary file.
C     
C     TOXFR recognizes the filename extensions in the left hand column
C     below and converts them into the corresponding filename
C     extensions in the right hand column.
C
C        'bc'   --> 'xc'
C        'bee'  --> 'xee'
C        'bpc'  --> 'xpc'
C        'bsp'  --> 'xsp'
C     
C$ Output
C
C     TOXFR creates a portable transfer file from a binary SPICE data 
C     file specified on the command line.
C
C$ Particulars
C
C     The usage of TOXFR is shown below:
C     
C     TOXFR input_file [output_file]
C     
C     The first word following the command must be the input filename 
C     and the second if it appears, must be the output file name.
C     
C     If the output file already exists, TOXFR signals an error and 
C     stops. We assume that it is bad form to stomp on a file without 
C     telling you about it.
C
C$ Examples
C
C     Example 1:
C
C        Convert the binary file 'ephem.bsp' into a transfer file.
C
C           > toxfr ephem.bsp
C
C        This will create the transfer file 'ephem.xsp'.
C
C     Example 2:
C
C        This is the same as Example 1, except we explicitly set the 
C        output filename on the command line.
C
C           > toxfr ephem.bsp myephem.xsp
C
C        This will create the transfer file 'myephem.bsp'.
C
C     Example 3:
C
C        For this example, we provide a filename extension on the input 
C        binary file that TOXFR does not recognize.
C
C           > toxfr mydata.bbb
C
C        This will create the transfer file 'mydata.xfr'.
C
C$ References
C
C     For additional information, see the TOXFR User's Guide.
C  
C$ Version
C
C-    SPICELIB Version 1.2.0  28-APR-2014 (BVS)
C
C        Updated to return with success or failure status.
C
C-    SPICELIB Version 1.1.0, 07-DEC-1995 (KRG)
C
C        Changed the search direction for the dot '.' in a file name.
C        The search is now performed from right to left, so problems 
C        with using ".." to refer to the parent directory in UNIX and 
C        DOS are fixed.
C
C        Also, now only the base name of the file is searched for the
C        extension.
C
C-    SPICELIB Version 1.0.0, 11-AUG-1995 (KRG)
C
C-&

C     
C     Spicelib functions
C     
      INTEGER               CARDI
      INTEGER               CPOSR
      INTEGER               ISRCHC
      INTEGER               RTRIM

      LOGICAL               EXISTS
      LOGICAL               FAILED

C     
C     Parameters
C
C     Lower bound for a SPICELIB CELL data structure.
C
      INTEGER               LBCELL
      PARAMETER           ( LBCELL = -5 )
C
C     Maximum number of open binary files allowed.
C
      INTEGER               MAXOPN
      PARAMETER           ( MAXOPN = 1 )
C
C     Maximum number fo file extensions (types).
C
      INTEGER               MAXTYP
      PARAMETER           ( MAXTYP = 4 )
C
C     Line length.
C
      INTEGER               LINLEN
      PARAMETER           ( LINLEN = 256 )
C
C     Filename length.
C
      INTEGER               FNMLEN
      PARAMETER           ( FNMLEN = 128 )
C
C     Filename extension length.
C
      INTEGER               EXTLEN
      PARAMETER           ( EXTLEN = 3 )
C
C     Decimal code for the backslash character, '\'.
C
      INTEGER               IBSLSH
      PARAMETER           ( IBSLSH = 92 )

C     
C     Variables
C
      CHARACTER*(EXTLEN)    BINEXT(MAXTYP)
      CHARACTER*(FNMLEN)    BINFNM
      CHARACTER*(1)         BSLASH
      CHARACTER*(EXTLEN)    EXTNSN
      CHARACTER*(LINLEN)    LINE
      CHARACTER*(3)         PTHCHR
      CHARACTER*(EXTLEN)    XFREXT(MAXTYP)
      CHARACTER*(FNMLEN)    XFRFNM

      INTEGER               BASBEG
      INTEGER               DOTPOS
      INTEGER               I
      INTEGER               IDXEXT
      INTEGER               NUMOPN
      INTEGER               OPNSET(LBCELL:MAXOPN)
C
C     Initial values.
C
      DATA                  BINEXT / 'BSP', 'BC', 'BEE', 'BPC' /
      DATA                  XFREXT / 'XSP', 'XC', 'XEE', 'XPC' /

C
C     Save all.
C
      SAVE

C
C     Check into the error handling.
C
      CALL CHKIN  ( 'TOXFR' )
C
C     Set the error action to ABORT mode. For the first part of the 
C     program we want to halt execution if an error occurs. Before the 
C     conversion, we set the error action to RETURN mode so that we can 
C     clean up if the conversion failed.
C
      CALL ERRACT ( 'SET', 'ABORT' )
C
C     Set the error messages that are printed.
C
      CALL ERRPRT ( 'SET', 'NONE, SHORT, LONG, TRACEBACK' )
C
C     Set the value of the backslash character.
C
      BSLASH = CHAR ( IBSLSH )
C     
C     Get the command line arguments.
C           
      CALL GETCML ( LINE )
C     
C     The minimum information we need to convert a file is the name of 
C     the binary file that is to be converted. We figure out the 
C     extension for the output file from the extension of the input 
C     file. If an output file name is provided that is used instead.
C                
      IF ( LINE .EQ. ' ' ) THEN
         
         CALL SETMSG ( 'Usage: toxfr file.b* [file.x*]' )
         CALL SIGERR ( 'SPICE(USAGEERROR)'              )
            
      END IF
C
C     Get the binary filename. If there is a second filename for the 
C     transfer format output file it will automatically appear in 
C     XFRFNM.
C
      CALL NEXTWD ( LINE, BINFNM, XFRFNM )
C
C     If there was no transfer filename, figure out the extension for 
C     the output file from the extension for the input file. If the 
C     extension is not recognized, or there is no extension, the 
C     extension '.xfr' will be used.
C
      IF ( XFRFNM .EQ. ' ' ) THEN

         PTHCHR = '/]' // BSLASH

         BASBEG = CPOSR ( BINFNM, PTHCHR, RTRIM(BINFNM) ) + 1

         DOTPOS = CPOSR ( BINFNM(BASBEG:), '.', RTRIM(BINFNM(BASBEG:)) )

         IF ( DOTPOS .GT. 0 ) THEN

            DOTPOS = DOTPOS + BASBEG - 1
            EXTNSN = BINFNM(DOTPOS+1:DOTPOS+3)
            CALL UCASE ( EXTNSN, EXTNSN )
            IDXEXT = ISRCHC( EXTNSN, MAXTYP, BINEXT )

            IF ( IDXEXT .GT. 0 ) THEN

               EXTNSN = XFREXT(IDXEXT)
               CALL LCASE ( EXTNSN, EXTNSN )
               XFRFNM = BINFNM(1:DOTPOS)//EXTNSN

            ELSE

               XFRFNM = BINFNM(1:DOTPOS)//'xfr'

            END IF

         ELSE

            XFRFNM = BINFNM(1:RTRIM(BINFNM))//'.xfr'

         END IF

      ELSE

         CALL LJUST ( XFRFNM, XFRFNM )

      END IF
C
C     If the output name already exists, we do not overwrite it, so 
C     signal an error.
C
      IF ( EXISTS ( XFRFNM ) ) THEN
         CALL SETMSG ( 'The output file ''#'' already exists.' )
         CALL ERRCH  ( '#', XFRFNM                             )
         CALL SIGERR ( 'SPICE(FILEALREADYEXISTS)'              )
      END IF

      CALL REPMC ( 'Converting: #', '#', BINFNM, LINE ) 
      CALL WRITLN ( LINE, 6 )
      CALL REPMC ( '        To: #', '#', XFRFNM, LINE ) 
      CALL WRITLN ( LINE, 6 )
C
C     Set the error action to return mode so that we can clean up if 
C     there is an error.
C
      CALL ERRACT ( 'SET', 'RETURN' )
C
C     Convert the file.
C
      CALL CONVBT ( BINFNM, XFRFNM  )

      IF ( FAILED () ) THEN
C
C     If we failed, reset the error handling and delete the transfer
C     file that we were creating, provided it exists.
C
         CALL RESET
         CALL SCARDI ( 0, OPNSET         )
         CALL CLEARI ( MAXOPN, OPNSET(1) )
C
C        Get the handles for any DAF files which may still be 
C        open and close them.
C
         CALL DAFHOF    ( OPNSET )
         NUMOPN = CARDI ( OPNSET )

         IF ( NUMOPN .GT. 0 ) THEN
            DO I = 1, NUMOPN
               CALL DAFCLS ( OPNSET(I) )
            END DO
         END IF
C
C        Clear out any binary file handles in the open set, 
C        OPNSET.
C
         CALL SCARDI ( 0,      OPNSET    )
         CALL CLEARI ( MAXOPN, OPNSET(1) )
C
C        Get the handles for any DAS files which may still be 
C        open and close them.
C
         CALL DASHOF    ( OPNSET )
         NUMOPN = CARDI ( OPNSET )

         IF ( NUMOPN .GT. 0 ) THEN

            DO I = 1, NUMOPN
               CALL DASCLS ( OPNSET(I) )
            END DO

         END IF

         IF ( EXISTS ( XFRFNM ) ) THEN
            CALL DELFIL( XFRFNM )
         END IF
C
C        Call RESET one more time just in case there was an 
C        error closing of deleting the file.
C
         CALL RESET

C
C        Stop with failure status.
C        
         CALL BYEBYE( 'FAILURE' )

      END IF

      CALL CHKOUT ( 'TOXFR' )

C
C     Stop with success status.
C        
      CALL BYEBYE( 'SUCCESS' )

      END
