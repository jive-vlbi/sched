C$Procedure      SAELGV ( Semi-axes of ellipse from generating vectors )
 
      SUBROUTINE SAELGV ( VEC1, VEC2, SMAJOR, SMINOR )
 
C$ Abstract
C
C     Find semi-axis vectors of an ellipse generated by two arbitrary
C     three-dimensional vectors.
C
C$ Disclaimer
C
C     THIS SOFTWARE AND ANY RELATED MATERIALS WERE CREATED BY THE
C     CALIFORNIA INSTITUTE OF TECHNOLOGY (CALTECH) UNDER A U.S.
C     GOVERNMENT CONTRACT WITH THE NATIONAL AERONAUTICS AND SPACE
C     ADMINISTRATION (NASA). THE SOFTWARE IS TECHNOLOGY AND SOFTWARE
C     PUBLICLY AVAILABLE UNDER U.S. EXPORT LAWS AND IS PROVIDED "AS-IS"
C     TO THE RECIPIENT WITHOUT WARRANTY OF ANY KIND, INCLUDING ANY
C     WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A
C     PARTICULAR USE OR PURPOSE (AS SET FORTH IN UNITED STATES UCC
C     SECTIONS 2312-2313) OR FOR ANY PURPOSE WHATSOEVER, FOR THE
C     SOFTWARE AND RELATED MATERIALS, HOWEVER USED.
C
C     IN NO EVENT SHALL CALTECH, ITS JET PROPULSION LABORATORY, OR NASA
C     BE LIABLE FOR ANY DAMAGES AND/OR COSTS, INCLUDING, BUT NOT
C     LIMITED TO, INCIDENTAL OR CONSEQUENTIAL DAMAGES OF ANY KIND,
C     INCLUDING ECONOMIC DAMAGE OR INJURY TO PROPERTY AND LOST PROFITS,
C     REGARDLESS OF WHETHER CALTECH, JPL, OR NASA BE ADVISED, HAVE
C     REASON TO KNOW, OR, IN FACT, SHALL KNOW OF THE POSSIBILITY.
C
C     RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF
C     THE SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY
C     CALTECH AND NASA FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE
C     ACTIONS OF RECIPIENT IN THE USE OF THE SOFTWARE.
C
C$ Required_Reading
C
C     ELLIPSES
C
C$ Keywords
C
C     ELLIPSE
C     GEOMETRY
C     MATH
C
C$ Declarations
 
      DOUBLE PRECISION      VEC1   ( 3 )
      DOUBLE PRECISION      VEC2   ( 3 )
      DOUBLE PRECISION      SMAJOR ( 3 )
      DOUBLE PRECISION      SMINOR ( 3 )
 
C$ Brief_I/O
C
C     Variable  I/O  Description
C     --------  ---  --------------------------------------------------
C     VEC1,
C     VEC2       I   Two vectors used to generate an ellipse.
C     SMAJOR     O   Semi-major axis of ellipse.
C     SMINOR     O   Semi-minor axis of ellipse.
C
C$ Detailed_Input
C
C     VEC1,
C     VEC2           are two vectors that define an ellipse.
C                    The ellipse is the set of points in 3-space
C
C                       CENTER  +  cos(theta) VEC1  +  sin(theta) VEC2
C
C                    where theta is in the interval ( -pi, pi ] and
C                    CENTER is an arbitrary point at which the ellipse
C                    is centered.  An ellipse's semi-axes are
C                    independent of its center, so the vector CENTER
C                    shown above is not an input to this routine.
C
C                    VEC2 and VEC1 need not be linearly independent;
C                    degenerate input ellipses are allowed.
C
C$ Detailed_Output
C
C     SMAJOR
C     SMINOR         are semi-major and semi-minor axes of the ellipse,
C                    respectively.
C
C$ Parameters
C
C     None.
C
C$ Exceptions
C
C     1)  If one or more semi-axes of the ellipse is found to be the
C         zero vector, the input ellipse is degenerate.  This case is
C         not treated as an error; the calling program must determine
C         whether the semi-axes are suitable for the program's intended
C         use.
C
C$ Files
C
C     None.
C
C$ Particulars
C
C     Two linearly independent but not necessarily orthogonal vectors
C     VEC1 and VEC2 can define an ellipse centered at the origin:  the
C     ellipse is the set of points in 3-space
C
C        CENTER  +  cos(theta) VEC1  +  sin(theta) VEC2
C
C     where theta is in the interval (-pi, pi] and CENTER is an
C     arbitrary point at which the ellipse is centered.
C
C     This routine finds vectors that constitute semi-axes of an
C     ellipse that is defined, except for the location of its center,
C     by VEC1 and VEC2.  The semi-major axis is a vector of largest
C     possible magnitude in the set
C
C        cos(theta) VEC1  +  sin(theta) VEC2
C
C     There are two such vectors; they are additive inverses of each
C     other. The semi-minor axis is an analogous vector of smallest
C     possible magnitude.  The semi-major and semi-minor axes are
C     orthogonal to each other.  If SMAJOR and SMINOR are choices of
C     semi-major and semi-minor axes, then the input ellipse can also
C     be represented as the set of points
C
C        CENTER  +  cos(theta) SMAJOR  +  sin(theta) SMINOR
C
C     where theta is in the interval (-pi, pi].
C
C     The capability of finding the axes of an ellipse is useful in
C     finding the image of an ellipse under a linear transformation.
C     Finding this image is useful for determining the orthogonal and
C     gnomonic projections of an ellipse, and also for finding the limb
C     and terminator of an ellipsoidal body.
C
C$ Examples
C
C     1)  An example using inputs that can be readily checked by
C         hand calculation.
C
C            Let
C
C               VEC1 = ( 1.D0,  1.D0,  1.D0 )
C               VEC2 = ( 1.D0, -1.D0,  1.D0 )
C
C           The subroutine call
C
C              CALL SAELGV ( VEC1, VEC2, SMAJOR, SMINOR )
C
C           returns
C
C              SMAJOR = ( -1.414213562373095D0,
C                          0.0D0,
C                         -1.414213562373095D0 )
C           and
C
C              SMINOR = ( -2.4037033579794549D-17
C                          1.414213562373095D0,
C                         -2.4037033579794549D-17 )
C
C
C     2)   This example is taken from the code of the SPICELIB routine
C          PJELPL, which finds the orthogonal projection of an ellipse
C          onto a plane.  The code listed below is the portion used to
C          find the semi-axes of the projected ellipse.
C
C             C
C             C     Project vectors defining axes of ellipse onto plane.
C             C
C                   CALL VPERP ( VEC1,   NORMAL,  PROJ1  )
C                   CALL VPERP ( VEC2,   NORMAL,  PROJ2  )
C
C                      .
C                      .
C                      .
C
C                   CALL SAELGV ( PROJ1,  PROJ2,  SMAJOR,  SMINOR )
C
C
C          The call to SAELGV determines the required semi-axes.
C
C$ Restrictions
C
C     None.
C
C$ Literature_References
C
C     [1]  Calculus, Vol. II.  Tom Apostol.  John Wiley & Sons, 1969.
C          See Chapter 5, `Eigenvalues of Operators Acting on Euclidean
C          Spaces'.
C
C$ Author_and_Institution
C
C     N.J. Bachman   (JPL)
C     W.L. Taber     (JPL)
C
C$ Version
C
C-    SPICELIB Version 1.1.1, 22-APR-2010 (NJB)
C
C        Header correction: assertions that the output
C        can overwrite the input have been removed.
C
C-    SPICELIB Version 1.1.0, 02-SEP-2005 (NJB)
C
C        Updated to remove non-standard use of duplicate arguments
C        in VSCL calls.
C
C-    SPICELIB Version 1.0.1, 10-MAR-1992 (WLT)
C
C        Comment section for permuted index source lines was added
C        following the header.
C
C-    SPICELIB Version 1.0.0, 02-NOV-1990 (NJB) (WLT)
C
C-&
 
C$ Index_Entries
C
C     semi-axes of ellipse from generating vectors
C
C-&

C$ Revisions
C
C-    SPICELIB Version 1.1.0, 02-SEP-2005 (NJB)
C
C        Updated to remove non-standard use of duplicate arguments
C        in VSCL calls.
C
C-& 
 
 
 
C
C     SPICELIB functions
C
      DOUBLE PRECISION      VDOT
      DOUBLE PRECISION      VNORM
 
      LOGICAL               RETURN
 
C
C     Local variables
C
      DOUBLE PRECISION      C      ( 2, 2 )
      DOUBLE PRECISION      EIGVAL ( 2, 2 )
      DOUBLE PRECISION      S      ( 2, 2 )
      DOUBLE PRECISION      SCALE
      DOUBLE PRECISION      TMPVC1 ( 3 )
      DOUBLE PRECISION      TMPVC2 ( 3 )

      INTEGER               I
      INTEGER               MAJOR
      INTEGER               MINOR
 
 
C
C     Standard SPICE error handling.
C
      IF ( RETURN () ) THEN
         RETURN
      ELSE
         CALL CHKIN ( 'SAELGV' )
      END IF
 
C
C        Let the notation
C
C           < a, b >
C
C        indicate the inner product of the vectors a and b.
C
C        The semi-major and semi-minor axes of the input ellipse are
C        vectors of maximum and minimum norm in the set
C
C           cos(x) VEC1  +  sin(x) VEC2
C
C        where x is in the interval (-pi, pi].
C
C        The square of the norm of a vector in this set is
C
C                                                2
C               || cos(x) VEC1  +  sin(x) VEC2 ||
C
C
C           =   < cos(x)VEC1 + sin(x)VEC2,  cos(x)VEC1 + sin(x)VEC2 > ;
C
C        this last expression can be written as the matrix product
C
C            T
C           X  S  X,                                                 (1)
C
C        where X is the unit vector
C
C           +-      -+
C           | cos(x) |
C           |        |
C           | sin(x) |
C           +-      -+
C
C        and S is the symmetric matrix
C
C           +-                                -+
C           | < VEC1, VEC1 >    < VEC1, VEC2 > |
C           |                                  |.
C           | < VEC1, VEC2 >    < VEC2, VEC2 > |
C           +-                                -+
C
C        Because the 2x2 matrix above is symmetric, there exists a
C        rotation matrix that allows us to diagonalize it:
C
C            T
C           C  S  C  =  D,
C
C        where D is a diagonal matrix.  Since rotation matrices are
C        orthogonal, we have
C
C            T
C           C  C  =  I.
C
C        If the unit vector U is defined by
C
C                T
C           U = C X,
C
C        then
C
C            T             T  T         T               T
C           X  S  X  =  ( U  C  )  C D C   ( C U )  =  U  D  U.
C
C        So, letting
C
C           +-   -+
C           |  u  |
C           |     |  =  U,
C           |  v  |
C           +-   -+
C
C        we may re-write the original quadratic expression (1) as
C
C           +-     -+    +-        -+    +-   -+
C           | u   v |    | D1    0  |    |  u  |,
C           +-     -+    |          |    |     |
C                        |          |    |  v  |
C                        | 0     D2 |    +-   -+
C                        +-        -+
C        or
C
C               2            2
C           D1 u    +    D2 v,
C
C        where the diagonal matrix above is D.  The eigenvalues D1 and
C        D2 are non-negative because they are eigenvalues of a positive
C        semi-definite matrix of the form
C
C            T
C           M  M.
C
C        We may require that
C
C           D1  >  D2;
C               -
C
C        then the maximum and minimum values of
C
C               2            2
C           D1 u    +    D2 v                                        (2)
C
C        are D1 and D2 respectively.  These values are the squares
C        of the lengths of the semi-major and semi-minor axes of the
C        ellipse, since the expression (2) is the square of the norm
C        of the point
C
C           cos(x) VEC1  + sin(x) VEC2.
C
C        Now we must find some eigenvectors.  Since the extrema of (2)
C        occur when
C
C                +-   -+                     +-   -+
C                |  1  |                     |  0  |
C           U =  |     |       or       U =  |     |,
C                |  0  |                     |  1  |
C                +-   -+                     +-   -+
C
C        and since
C
C           X = C U,
C
C        we conclude that the extrema occur when X = C1 or X = C2, where
C        C1 and C2 are the first and second columns of C.  Looking at
C        the definition of X, we see that the extrema occur when
C
C           cos(x) = C1(1)
C           sin(x) = C1(2)
C
C        and when
C
C           cos(x) = C2(1),
C           sin(x) = C2(2)
C
C        So the semi-major and semi-minor axes of the ellipse are
C
C           C(1,1) VEC1  +  C(2,1) VEC2
C
C        and
C
C           C(1,2) VEC1  +  C(2,2) VEC2
C
C        (the negatives of these vectors are also semi-axes).
C
C
C     Copy the input vectors.
C
      CALL MOVED ( VEC1, 3, TMPVC1 )
      CALL MOVED ( VEC2, 3, TMPVC2 )
 
C
C     Scale the vectors to try to prevent arithmetic unpleasantness.
C     We avoid using the quotient 1/SCALE, as this value may overflow.
C     No need to go further if SCALE turns out to be zero.
C
      SCALE = MAX (  VNORM ( TMPVC1 ),   VNORM ( TMPVC2 )  )
 
      IF ( SCALE .EQ. 0.D0 ) THEN
 
         CALL CLEARD ( 3, SMAJOR )
         CALL CLEARD ( 3, SMINOR )
 
         CALL CHKOUT ( 'SAELGV' )
         RETURN
 
      END IF
 
      DO I = 1, 3
         TMPVC1(I) = TMPVC1(I) / SCALE
         TMPVC2(I) = TMPVC2(I) / SCALE
      END DO
 
C
C     Compute S and diagonalize it:
C
      S(1,1) = VDOT ( TMPVC1, TMPVC1 )
      S(2,1) = VDOT ( TMPVC1, TMPVC2 )
      S(1,2) = S(2,1)
      S(2,2) = VDOT ( TMPVC2, TMPVC2 )
 
      CALL DIAGS2 ( S, EIGVAL, C )
 
C
C     Find the semi-axes.
C
      IF (   DABS( EIGVAL(1,1) )  .GE.  DABS( EIGVAL(2,2) )   )  THEN
C
C        The first eigenvector ( first column of C ) corresponds
C        to the semi-major axis of the ellipse.
C
         MAJOR = 1
         MINOR = 2
 
      ELSE
C
C        The second eigenvector corresponds to the semi-major axis.
C
         MAJOR = 2
         MINOR = 1
 
      END IF
 
      CALL VLCOM ( C(1,MAJOR), TMPVC1, C(2,MAJOR), TMPVC2, SMAJOR )
      CALL VLCOM ( C(1,MINOR), TMPVC1, C(2,MINOR), TMPVC2, SMINOR )
 
C
C     Undo the initial scaling.
C
      CALL VSCLIP ( SCALE, SMAJOR )
      CALL VSCLIP ( SCALE, SMINOR )
 
 
      CALL CHKOUT ( 'SAELGV' )
      RETURN
      END
